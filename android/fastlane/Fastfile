# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  
  desc "Sets up project to be able to run necessary plugins"
  lane :setup do
    sh('echo | bundle exec fastlane add_plugin increment_version_code')
  end
  
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to internal testing"
  lane :beta do
    increment_version_code
    gradle(
      task: 'bundle',
      build_type: 'Release'
    )
    upload_to_play_store(
      track: 'internal',
      skip_upload_apk: true,
      release_status: 'draft'
    )
  end
  
  desc "Deploys to play store without needing json key file"
  lane :deploy_to_play_store_circle_ci do
    
    increment_version_code
    
    # Decode keystore and store it in a file
    base64_keystore = ENV['BASE64_KEYSTORE']  # Retrieve the base64-encoded keystore from environment variables
    decoded_keystore = Base64.decode64(base64_keystore)
    File.open('decoded_keystore.keystore', 'wb') { |f| f.write(decoded_keystore) }
    
    gradle(
      task: 'bundle',
      build_type: 'Release',
      properties: {
        'storeFile': 'decoded_keystore.keystore',
        'keyAlias': ENV['RELEASE_KEY_ALIAS'],
        'storePassword': ENV['RELEASE_STORE_PASSWORD'],
        'keyPassword': ENV['RELEASE_KEY_PASSWORD']
      }
    )
    
    # Delete the keystore we have generated
    sh 'rm decoded_keystore.keystore'
    
    upload_to_play_store(
      track: 'internal',
      skip_upload_apk: true,
      release_status: 'draft',
      json_key_data: ENV['SUPPLY_JSON_KEY_DATA']
    )

  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end
